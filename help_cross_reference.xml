<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, May 17, 2018, 8:37 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "help_cross_reference" generated by Plugin Wizard -->

<muclient>
<plugin
   name="help_cross_reference"
   author="Daak"
   id="e38749589e9b35318af4af96"
   language="Lua"
   purpose="Help Cross Reference"
   save_state="y"
   date_written="2018-05-17 20:36:13"
   requires="5.06"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Finds matching help files for multiple keywords, currently only two

Examples:
  xhelp haste instinct

Results:
Accelerate          : The psionicist's ability to move at great speed.
Haste               : A quickling's natural racial ability.
Instinct            : Information on the instinct feature
Amnesia             : Cause an opponent to forget his/her training.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<aliases>
  <alias
    match="^xhelp (?&lt;keywords&gt;.*)$"
    script="cross_help"
    name="cross_help"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="n"
   match="^(?&lt;search&gt;[ A-Za-z0-9_-]+) *: (?&lt;search_short&gt;.*)$"
   name="search_line"
   script="search_line"
   sequence="100"
   regexp="y"
   group="searching"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^No helpfiles matched requested search.$"
   name="search_end_none_found"
   script="search_end"
   sequence="100"
   regexp="y"
   group="searching"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(\d+) help file?s contain the phrase or keyword '.*'.$"
   name="search_end"
   script="search_end"
   sequence="100"
   regexp="y"
   group="searching"
   omit_from_output="n"
  >
  </trigger>
</triggers>

<script>
<![CDATA[

require "tprint"
dofile (GetInfo(60) .. "aardwolf_colors.lua")

hits = {}
keywords = {}
keywords_display = ""
cross_on = 0
cross_count = 0
cross_found = {}
cross_found_map = {}
search_keyword = ""
search_count = 0
search_found = {}

function cross_help (name, line, wildcards)
  if wildcards.keywords == nil or wildcards.keywords == "" then
    Note("Nothing to search for.")
  end
  cross_on = 0
  cross_count = 0
  cross_found = {}
  cross_found_map = {}
  keywords = {}
  keywords_display = wildcards.keywords
  for keyword in wildcards.keywords:gmatch("%w+") do
    table.insert(keywords, keyword)
    cross_count = cross_count + 1
  end
  if cross_count < 2 then
    Note("Cannot cross reference on 1 keyword, provide at least 2 keywords.")
  else
    search_for(keywords[1])
  end
end -- cross_help

function search_for (keyword)
  if keyword == nil then
    --Note("search_for keyword is nil")
    search_report()
    return
  end
  --Note("Searching for keyword = " .. keyword)
  search_keyword = keyword
  search_count = 0
  search_found = {}
  EnableTriggerGroup("searching", true)
  Send("help search " .. search_keyword)
end -- search_for

function search_line (name, line, wildcards)
  -- Weather Observatory : Information on the area, Weather Observatory
  -- 123456789012345678901
  -- tprint(wildcards)
  search_phrase = trim(wildcards.search)
  search_short = trim(wildcards.search_short)
  table.insert(search_found, {phrase=search_phrase, short=search_short})
  search_count = search_count + 1
  --Note("search_count = " .. search_count .. " keyword = " .. search_keyword)
end -- search_line

function search_end (name, line, wildcards)
  EnableTriggerGroup("searching", false)
  -- Note("Search end called name = " .. name)
  if search_count < 1 then
    Note("\nNothing found for keyword = " .. search_keyword)
    return
  else
    -- Note("Found " .. search_count .. " results for keyword = " .. search_keyword)
    cross_found[search_keyword] = search_found
    cross_found_map[#cross_found_map+1] = search_keyword
  end
  cross_on = cross_on + 1
  local next = cross_on + 1
  search_for(keywords[next])
end -- search_end

function search_report ()
  Note(" ")
  Note("Below are the cross references for keywords: " .. keywords_display)
  hits = {}
  for i = 1, cross_count - 1 do
    local new_hits = {}
    local table1 = {}
    local table2 = {}
    local _keyword = cross_found_map[i]
    for i,v in pairs(cross_found[_keyword]) do
      table1[#table1+1] = v.phrase
    end
    _keyword = cross_found_map[i+1]
    --tprint(cross_found[_keyword])
    for i,v in pairs(cross_found[_keyword]) do
      table2[#table2+1] = v.phrase
    end
    hits = same_vals(table1, table2)
  end
  if tableCountItems(hits) == 0 then
    Note("No cross references help files found")
    return
  end
  for i,v in pairs(hits) do
    local _keyword = cross_found_map[1]
    local _phrase = v
    for i2,v2 in pairs(cross_found[_keyword]) do
      if v2.phrase == _phrase then
        local _out = "@c" .. padRight(_phrase, 20, " ") .. ": @w" .. v2.short
        local _styles = ColoursToStyles(_out)
        for i, s in ipairs(_styles) do
          ColourTell(RGBColourToName(s.textcolour), "", s.text)
        end
        Note("")
        --Tell(padRight(_phrase, 20, " "))
        --Tell(": ")
        --Note(v2.short)
      end
    end
  end
  --tprint(cross_found)
  --tprint(cross_found_map)
end -- search_report

-- Utils  --

function same_vals(table1, table2)
  local vals1 = {}
  local vals2 = {}
  local same = {}
  for i1,v1 in pairs(table1) do
    for i2,v2 in pairs(table2) do
      if v1 == v2 then
        same[#same+1] = v1
      end
    end
  end
  return same
end -- same_vals

function tableCountItems(ttable)
  local count = 0
  for i,v in pairs(ttable) do
    count = count + 1
  end
  if count == 0 then
    for i,v in ipairs(ttable) do
      count = count + 1
    end
  end
  return count
end

function padRight(text, length, padChar)
  local padding = length - string.len(text)
  for i = 1, padding do
    text = text .. padChar
  end
  return text
end

function trim(s)
  return s:match "^%s*(.-)%s*$"
end

function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
