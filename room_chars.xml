<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, March 23, 2018, 8:27 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "room_chars" generated by Plugin Wizard -->

<muclient>
<plugin
   name="room_chars"
   author="Daak"
   id="b7898789dcc8d637ca711b1d"
   language="Lua"
   purpose="Lists roomchars to miniwindow"
   save_state="y"
   date_written="2018-03-23 20:26:43"
   requires="5.06"
   version="1.0"
   >

</plugin>


<aliases>
  <alias
    match="^drc reload$"
    script="drc_reload"
    name="drc_reload"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
  <alias
    match="^drc table$"
    script="drc_table"
    name="drc_table"
    enabled="y" regexp="y" sequence="100" ignore_case="y"
    >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="y"
   match="^{roomchars}$"
   name="drc_start"
   script="drc_start"
   sequence="100"
   regexp="y"
   omit_from_output="y"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^.*$"
   name="drc_line"
   script="drc_line"
   sequence="101"
   regexp="y"
   group="drc_capture"
   omit_from_output="n"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^{\/roomchars}$"
   name="drc_end"
   script="drc_end"
   sequence="100"
   regexp="y"
   omit_from_output="y"
  >
  </trigger>
</triggers>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<script>
<![CDATA[

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")
dofile (GetInfo(60) .. "aardwolf_colors.lua")

require 'var'
require 'pluginhelper'
require "miniwin"
require "tprint"
require "commas"
require "serialize"
require "copytable"

room_chars = {}

testwin2 = Miniwin:new{name="Room Chars"}
testwin2:set_default('header_height', 1)
testwin2:set_default('use_tabwin', false)

styles = {}
header = {}
-- Header Line, centered
--style = {}
--style.text = "Room Chars"
--style.hjust = 'center'
--style.font_size = 9
--tstyle = {style}
--table.insert(header, tstyle)

-- First Line
style = {}
style.text = "Look in room"
style.font_size = 10
style.hjust = 'left'
style.cellborder = false
--style.bordercolour = 'green'
nstyle = {style}
nstyle.lineborder = false
--nstyle.bordercolour = 'blue'
--nstyle[1].hint = serialize.save_simple(nstyle)
nstyle[1].mouseover = nofunc
table.insert(styles, nstyle)

styles2 = copytable.deep(styles)

Note("Reloaded room_chars")

function drc_start (name, line, wildcards)
  room_chars = {}
  EnableTriggerGroup("drc_capture", true)
end -- drc_start

function drc_end (name, line, wildcards)
  EnableTriggerGroup("drc_capture", false)
  drc_draw_table()
end -- drc_end

function drc_line (name, line, wildcards, styles)
  local tmp = StylesToColours(styles)
  table.insert(room_chars, {text=tmp})
  --tprint(room_chars)
end -- drc_capture

function drc_draw_table ()
  local styles = {}
  styles2 = {}
  if tableCountItems(room_chars) == 0 then
    --Note("room_chars is empty")
    style.text = "No roomchars"
    style.font_size = 10
    style.hjust = 'left'
    style.cellborder = false
    local nstyle = {style}
    nstyle.lineborder = false
    nstyle[1].mouseover = nofunc
    table.insert(styles2, nstyle)
    testwin2:addtab('tab1', styles2)
    return
  end
  for i,v in ipairs(room_chars) do
    style = {}
    style.text = v.text
    style.font_size = 10
    style.hjust = 'left'
    style.cellborder = false
    --style.bordercolour = 'green'
    local nstyle = {style}
    nstyle.lineborder = false
    --nstyle.bordercolour = 'blue'
    --nstyle[1].hint = serialize.save_simple(nstyle)
    nstyle[1].mouseover = nofunc
    table.insert(styles2, nstyle)
  end
  testwin2:addtab('tab1', styles2)
end -- drc_table

function drc_table ()
  if tableCountItems(room_chars) == 0 then
    Note("room_chars is empty")
    return
  end
  tprint(room_chars)
  for i,v in ipairs(room_chars) do
    Note(v.colour)
    Note(v.text)
    ColourTell(RGBColourToName(v.colour), "", v.text)
    if v.text == "" then
      ColourTell(RGBColourToName(v.colour), "", "\n")
    end
  end
end -- drc_table

function drc_reload ()
  Note("Reloading room_chars")
  retval = Execute("\\\\\\" .. "DoAfterSpecial(1, \"ReloadPlugin('" .. GetPluginID() .. "')\", sendto.script)")
end -- drc_reload

function OnPluginBroadcast (msg, id, name, text)
  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()
  --OnPluginDisable is automatically called by pluginhelper

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  phelper:OnPluginEnable()
  -- always create windows after OnPluginEnable due to default variable handling
  testwin2:enable()
  testwin2:addtab('tab1', styles2, header)

end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState

-- utils
function tableCountItems(ttable)
  local count = 0
  for i,v in pairs(ttable) do
    count = count + 1
  end
  if count == 0 then
    for i,v in ipairs(ttable) do
      count = count + 1
    end
  end
  return count
end

]]>
</script>

<script>
<![CDATA[
phelper:set_default('cmd', 'drc')
phelper:set_default('plugin_colour', 'steelblue')

phelper:add_pobject('win2', testwin2)

phelper:enable()

phelper:addaardhelps{"Map", "Automap", "Maprun", "Maptags", "Speedwalks", "Academy-Geography", "Runto"}
phelper:addaardcmds{"map", "automap", "maprun", "tags", "runto"}

]]>
</script> 

</muclient>
